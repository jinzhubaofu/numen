{"version":3,"sources":["HistoryLocator.js"],"names":["Locator","Location","addEventListener","removeEventListener","guid","PUSH","REPLACE","TRAVEL","HISTORY_LOCATOR_STATE_ID_KEY","HISTORY_API_SUPPORTED","window","history","pushState","HistoryLocator","start","onLocationChange","stop","getLocation","e","state","id","loc","location","pathname","search","hash","path","replaceState","finishTransit","nextLocation","action","title","nextLocationHref","toString","module","exports"],"mappings":";;4CAKyB,W,EACC,Y,EAMd,Q,EAMA,U;;2DAba,W,WACC,Y,WAMd,Q,WAMA,U;;;;;;;;yCAbNA,O,EACAC,Q;;;QAGFC,gB,YAAAA,gB;QACAC,mB,YAAAA,mB;QACAC,I,YAAAA,I;QAIAC,I,aAAAA,I;QACAC,O,aAAAA,O;QACAC,M,aAAAA,M;;;AAGJ,QAAMC,+BAA+B,UAArC;;AAEA,QAAMC,wBAAwB,OAAOC,OAAOC,OAAP,CAAeC,SAAtB,KAAoC,UAAlE;;QAEMC,c;;;;;;;;iCAEFC,K,oBAAQ;AACJ,+BAAMA,KAAN;AACAZ,6BAAiBQ,MAAjB,EAAyB,UAAzB,EAAqC,KAAKK,gBAA1C;AACA,mBAAO,IAAP;AACH,S;;iCAEDC,I,mBAAO;AACHb,gCAAoBO,MAApB,EAA4B,UAA5B,EAAwC,KAAKK,gBAA7C;AACA,mBAAO,IAAP;AACH,S;;iCAQDE,W,wBAAYC,C,EAAG;;AAEX,gBAAMC,QAAQD,KAAKA,EAAEC,KAAP,IAAgBT,OAAOC,OAAP,CAAeQ,KAA/B,IAAwC,EAAtD;;AAEA,gBAAIC,KAAKD,MAAMX,4BAAN,CAAT;;AAEA,gBAAIa,MAAMX,OAAOY,QAAjB;;AANW,gBAQNC,QARM,GAQoBF,GARpB,CAQNE,QARM;AAAA,gBAQIC,MARJ,GAQoBH,GARpB,CAQIG,MARJ;AAAA,gBAQYC,IARZ,GAQoBJ,GARpB,CAQYI,IARZ;;AASX,gBAAIC,OAAOH,WAAWC,MAAX,GAAoBC,IAA/B;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,gBAAI,CAACL,EAAL,EAAS;;AAELA,qBAAKhB,MAAL;;AAEA;AACA,oBAAIK,qBAAJ,EAA2B;AAAA;;AACvBC,2BAAOC,OAAP,CAAegB,YAAf,6BAEWR,KAFX,qDAGSX,4BAHT,IAGwCY,EAHxC,2BAKI,IALJ,EAMIM,IANJ;AAQH;AAEJ;;AAED,mBAAO,IAAIzB,QAAJ,CAAayB,IAAb,EAAmBnB,MAAnB,EAA2Ba,EAA3B,EAA+B,EAA/B,CAAP;AAEH,S;;iCASDQ,a,0BAAcC,Y,EAAc;AAAA;;AAAA,gBAEjBC,MAFiB,GAEAD,YAFA,CAEjBC,MAFiB;AAAA,gBAETC,KAFS,GAEAF,YAFA,CAETE,KAFS;;;AAIxB,gBAAMZ,6BACDX,4BADC,IAC8BqB,aAAaT,EAD3C,SAAN;;AAIA,gBAAMY,mBAAmBH,aAAaI,QAAb,EAAzB;;AAEA;AACA,gBAAI,CAACxB,qBAAL,EAA4B;AACxBC,uBAAOY,QAAP,GAAkBU,gBAAlB;AACA;AACH;;AAED,oBAAQF,MAAR;AACI,qBAAKzB,IAAL;AACIK,2BAAOC,OAAP,CAAeC,SAAf,CAAyBO,KAAzB,EAAgCY,KAAhC,EAAuCC,gBAAvC;AACA;AACJ,qBAAK1B,OAAL;AACII,2BAAOC,OAAP,CAAegB,YAAf,CAA4BR,KAA5B,EAAmCY,KAAnC,EAA0CC,gBAA1C;AACA;AANR;;AASA,+BAAMJ,aAAN,YAAoBC,YAApB;AAEH,S;;;MArGwB7B,O;;AAyG7BkC,WAAOC,OAAP,GAAiBtB,cAAjB","file":"HistoryLocator.js","sourcesContent":["/**\n * @file HistoryLocator\n * @author leon(ludafa@outlook.com)\n */\n\nconst Locator =  require('./Locator');\nconst Location =  require('./Location');\n\nconst {\n    addEventListener,\n    removeEventListener,\n    guid\n} = require('./util');\n\nconst {\n    PUSH,\n    REPLACE,\n    TRAVEL\n} = require('./action');\n\nconst HISTORY_LOCATOR_STATE_ID_KEY = '__hlik__';\n\nconst HISTORY_API_SUPPORTED = typeof window.history.pushState === 'function';\n\nclass HistoryLocator extends Locator {\n\n    start() {\n        super.start();\n        addEventListener(window, 'popstate', this.onLocationChange);\n        return this;\n    }\n\n    stop() {\n        removeEventListener(window, 'popstate', this.onLocationChange);\n        return this;\n    }\n\n    /**\n     * 获取地址\n     *\n     * @param {Event=} e popstate 事件\n     * @return {module:Location}\n     */\n    getLocation(e) {\n\n        const state = e && e.state || window.history.state || {};\n\n        let id = state[HISTORY_LOCATOR_STATE_ID_KEY];\n\n        let loc = window.location;\n\n        let {pathname, search, hash} = loc;\n        let path = pathname + search + hash;\n\n        // 实现是这样的：\n        // 使用 history api 时，我们会占用 state 中的一项来存储 Location Id\n        // 这样我们的 stack 就可以只保存 Locaiton Id 了\n        // 原因是这样的：\n        // 我们在 TRAVEL 的时候呢，需要找出来 travel target location 在我们 stack 中的位置\n        // 比如 A -> B -> C -> D，然后呢，我们现在在 D\n        // 那么 go(-2)， 我们应当移动到 B；点一下后退按钮，我们应当移动到 C。\n        // 但是 -2 还是 -1 这个事情我们是并不知道的。\n        // ## go 也许还行，强制大家用我们的 api；点后退这事儿就不行了（可以默认-1啊。。）\n        // 所以呢，我们在 pushState 的时候要把 id 丢到 state 中\n        // 不管回退到哪一步，我们只要从 state 里边取出 id，我们就知道现在我们在哪了。\n        // 也就是说 A(id:1) -> B(id:2) -> C(id:3) -> D(id:4)\n        // 那么我们在处理 TRAVEL 的时候就有 id 可以用啦\n        // 但是！第一次启动的时候，我们并没有 state，也就是 A 没有用 id 可用\n        // 因此，我们要这么干，在发现没有 id 的时候自动补上\n        if (!id) {\n\n            id = guid();\n\n            // 如果支持 history api 我们才可以这样搞，要不然就直接挂了\n            if (HISTORY_API_SUPPORTED) {\n                window.history.replaceState(\n                    {\n                        ...state,\n                        [HISTORY_LOCATOR_STATE_ID_KEY]: id\n                    },\n                    null,\n                    path\n                );\n            }\n\n        }\n\n        return new Location(path, TRAVEL, id, '');\n\n    }\n\n    /**\n     * 更新URL\n     *\n     * 子类方法会更新浏览器地址栏中的地址\n     *\n     * @param {module:Location} nextLocation 下一个地址\n     */\n    finishTransit(nextLocation) {\n\n        const {action, title} = nextLocation;\n\n        const state = {\n            [HISTORY_LOCATOR_STATE_ID_KEY]: nextLocation.id\n        };\n\n        const nextLocationHref = nextLocation.toString();\n\n        // 如果当前浏览器不支持 history api 我们默认的行为是跳转\n        if (!HISTORY_API_SUPPORTED) {\n            window.location = nextLocationHref;\n            return;\n        }\n\n        switch (action) {\n            case PUSH:\n                window.history.pushState(state, title, nextLocationHref);\n                break;\n            case REPLACE:\n                window.history.replaceState(state, title, nextLocationHref);\n                break;\n        }\n\n        super.finishTransit(nextLocation);\n\n    }\n\n}\n\nmodule.exports = HistoryLocator;\n"],"sourceRoot":"/source/"}